int bitmask;
int PendingReq = 0;
int i = 0;
me->CurrentPriorityValue = -1;
for (i = 0; i < 4; ++i) {
    PendingReq |= me->PendingReqValue[i] << i;
}
printf("Pending Request, direction, current: %d 3 %d\n", PendingReq, me->FloorSensorValue);
printf("Current %d \n", me->FloorSensorValue);
if (me->FloorSensorValue == 0) {
    printf("Idle case when on bottom floor\n");
    bitmask = 0x01;
    for (i = 0; i < 4; ++i) {
        if (i > me->FloorSensorValue && (PendingReq & bitmask)) {
            me->CurrentPriorityValue = i;
            printf("Init Up Priority = %d\n", me->CurrentPriorityValue);
            break;
        }
        bitmask = bitmask << 1;
    }
} else if (me->FloorSensorValue == 4 - 1) {
    printf("Idle case when on top floor\n");
    bitmask = 0x08;
    for (i = 4 - 1; i > -1; --i) {
        if (i < me->FloorSensorValue && (PendingReq & bitmask)) {
            me->CurrentPriorityValue = i;
            printf("Init Down Priority= %d\n", me->CurrentPriorityValue);
            break;
        }
        bitmask = bitmask >> 1;
    }
} else {
    //if lift is somewhere in the middle it will go down if
    //there is any requests below the current floor
    printf("Idle case when on some middle floor\n");
    bitmask = 0x01;
    for (i = 0; i < 4; ++i) {
        if (i > me->FloorSensorValue && (PendingReq & bitmask)) {
            me->CurrentPriorityValue = i;
            printf("Middle Up Priority = %d\n", me->CurrentPriorityValue);
            break;
        }
        bitmask = bitmask << 1;
    }
    // if there are no up requests > current
    if (me->CurrentPriorityValue == -1) {
        bitmask = 0x08;
        for(i = 4- 1; i > -1; --i) {
            if (i < me->FloorSensorValue && (PendingReq & bitmask)) {
                me->CurrentPriorityValue = i;
                printf("Middle Down Priority = %d\n", me->CurrentPriorityValue);
                break;
            }
            bitmask = bitmask >> 1;
        }
    }
}